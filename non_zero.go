// Code generated by ./cmd/gen. DO NOT EDIT.

package stef

import "math/big"

type NonZeroU8 struct {
	value uint8
}

func (v NonZeroU8) Get() uint8 {
	return v.value
}

func NewNonZeroU8(value uint8) (NonZeroU8, bool) {
	if value > 0 {
		return NonZeroU8{value: value}, true
	}
	return NonZeroU8{}, false
}

type NonZeroU16 struct {
	value uint16
}

func (v NonZeroU16) Get() uint16 {
	return v.value
}

func NewNonZeroU16(value uint16) (NonZeroU16, bool) {
	if value > 0 {
		return NonZeroU16{value: value}, true
	}
	return NonZeroU16{}, false
}

type NonZeroU32 struct {
	value uint32
}

func (v NonZeroU32) Get() uint32 {
	return v.value
}

func NewNonZeroU32(value uint32) (NonZeroU32, bool) {
	if value > 0 {
		return NonZeroU32{value: value}, true
	}
	return NonZeroU32{}, false
}

type NonZeroU64 struct {
	value uint64
}

func (v NonZeroU64) Get() uint64 {
	return v.value
}

func NewNonZeroU64(value uint64) (NonZeroU64, bool) {
	if value > 0 {
		return NonZeroU64{value: value}, true
	}
	return NonZeroU64{}, false
}

type NonZeroU128 struct {
	value *big.Int
}

func (v NonZeroU128) Get() *big.Int {
	return v.value
}

func NewNonZeroU128(value *big.Int) (NonZeroU128, bool) {
	if value.Cmp(big.NewInt(0)) > 0 {
		return NonZeroU128{value: value}, true
	}
	return NonZeroU128{}, false
}

type NonZeroI8 struct {
	value int8
}

func (v NonZeroI8) Get() int8 {
	return v.value
}

func NewNonZeroI8(value int8) (NonZeroI8, bool) {
	if value != 0 {
		return NonZeroI8{value: value}, true
	}
	return NonZeroI8{}, false
}

type NonZeroI16 struct {
	value int16
}

func (v NonZeroI16) Get() int16 {
	return v.value
}

func NewNonZeroI16(value int16) (NonZeroI16, bool) {
	if value != 0 {
		return NonZeroI16{value: value}, true
	}
	return NonZeroI16{}, false
}

type NonZeroI32 struct {
	value int32
}

func (v NonZeroI32) Get() int32 {
	return v.value
}

func NewNonZeroI32(value int32) (NonZeroI32, bool) {
	if value != 0 {
		return NonZeroI32{value: value}, true
	}
	return NonZeroI32{}, false
}

type NonZeroI64 struct {
	value int64
}

func (v NonZeroI64) Get() int64 {
	return v.value
}

func NewNonZeroI64(value int64) (NonZeroI64, bool) {
	if value != 0 {
		return NonZeroI64{value: value}, true
	}
	return NonZeroI64{}, false
}

type NonZeroI128 struct {
	value *big.Int
}

func (v NonZeroI128) Get() *big.Int {
	return v.value
}

func NewNonZeroI128(value *big.Int) (NonZeroI128, bool) {
	if value.Cmp(big.NewInt(0)) != 0 {
		return NonZeroI128{value: value}, true
	}
	return NonZeroI128{}, false
}

type NonZeroString struct {
	value string
}

func (v NonZeroString) Get() string {
	return v.value
}

func NewNonZeroString(value string) (NonZeroString, bool) {
	if len(value) > 0 {
		return NonZeroString{value: value}, true
	}
	return NonZeroString{}, false
}

type NonZeroBytes struct {
	value []byte
}

func (v NonZeroBytes) Get() []byte {
	return v.value
}

func NewNonZeroBytes(value []byte) (NonZeroBytes, bool) {
	if len(value) > 0 {
		return NonZeroBytes{value: value}, true
	}
	return NonZeroBytes{}, false
}

type NonZeroVec[T any] struct {
	value []T
}

func (v NonZeroVec[T]) Get() []T {
	return v.value
}

func NewNonZeroVec[T any](value []T) (NonZeroVec[T], bool) {
	if len(value) > 0 {
		return NonZeroVec[T]{value: value}, true
	}
	return NonZeroVec[T]{}, false
}

type NonZeroHashMap[K comparable, V any] struct {
	value map[K]V
}

func (v NonZeroHashMap[K, V]) Get() map[K]V {
	return v.value
}

func NewNonZeroHashMap[K comparable, V any](value map[K]V) (NonZeroHashMap[K, V], bool) {
	if len(value) > 0 {
		return NonZeroHashMap[K, V]{value: value}, true
	}
	return NonZeroHashMap[K, V]{}, false
}
