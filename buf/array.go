// Code generated by ./cmd/gen. DO NOT EDIT.

package buf

func EncodeArray1[T any](w []byte, array [1]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray1[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [1]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [1]T{}, err
	}

	array := [1]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [1]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 1; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [1]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray2[T any](w []byte, array [2]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray2[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [2]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [2]T{}, err
	}

	array := [2]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [2]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 2; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [2]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray3[T any](w []byte, array [3]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray3[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [3]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [3]T{}, err
	}

	array := [3]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [3]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 3; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [3]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray4[T any](w []byte, array [4]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray4[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [4]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [4]T{}, err
	}

	array := [4]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [4]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 4; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [4]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray5[T any](w []byte, array [5]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray5[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [5]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [5]T{}, err
	}

	array := [5]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [5]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 5; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [5]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray6[T any](w []byte, array [6]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray6[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [6]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [6]T{}, err
	}

	array := [6]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [6]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 6; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [6]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray7[T any](w []byte, array [7]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray7[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [7]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [7]T{}, err
	}

	array := [7]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [7]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 7; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [7]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray8[T any](w []byte, array [8]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray8[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [8]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [8]T{}, err
	}

	array := [8]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [8]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 8; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [8]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray9[T any](w []byte, array [9]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray9[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [9]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [9]T{}, err
	}

	array := [9]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [9]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 9; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [9]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray10[T any](w []byte, array [10]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray10[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [10]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [10]T{}, err
	}

	array := [10]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [10]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 10; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [10]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray11[T any](w []byte, array [11]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray11[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [11]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [11]T{}, err
	}

	array := [11]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [11]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 11; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [11]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray12[T any](w []byte, array [12]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray12[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [12]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [12]T{}, err
	}

	array := [12]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [12]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 12; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [12]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray13[T any](w []byte, array [13]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray13[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [13]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [13]T{}, err
	}

	array := [13]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [13]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 13; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [13]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray14[T any](w []byte, array [14]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray14[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [14]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [14]T{}, err
	}

	array := [14]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [14]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 14; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [14]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray15[T any](w []byte, array [15]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray15[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [15]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [15]T{}, err
	}

	array := [15]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [15]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 15; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [15]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray16[T any](w []byte, array [16]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray16[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [16]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [16]T{}, err
	}

	array := [16]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [16]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 16; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [16]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray17[T any](w []byte, array [17]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray17[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [17]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [17]T{}, err
	}

	array := [17]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [17]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 17; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [17]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray18[T any](w []byte, array [18]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray18[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [18]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [18]T{}, err
	}

	array := [18]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [18]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 18; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [18]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray19[T any](w []byte, array [19]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray19[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [19]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [19]T{}, err
	}

	array := [19]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [19]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 19; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [19]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray20[T any](w []byte, array [20]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray20[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [20]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [20]T{}, err
	}

	array := [20]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [20]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 20; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [20]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray21[T any](w []byte, array [21]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray21[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [21]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [21]T{}, err
	}

	array := [21]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [21]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 21; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [21]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray22[T any](w []byte, array [22]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray22[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [22]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [22]T{}, err
	}

	array := [22]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [22]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 22; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [22]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray23[T any](w []byte, array [23]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray23[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [23]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [23]T{}, err
	}

	array := [23]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [23]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 23; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [23]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray24[T any](w []byte, array [24]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray24[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [24]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [24]T{}, err
	}

	array := [24]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [24]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 24; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [24]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray25[T any](w []byte, array [25]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray25[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [25]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [25]T{}, err
	}

	array := [25]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [25]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 25; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [25]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray26[T any](w []byte, array [26]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray26[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [26]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [26]T{}, err
	}

	array := [26]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [26]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 26; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [26]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray27[T any](w []byte, array [27]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray27[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [27]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [27]T{}, err
	}

	array := [27]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [27]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 27; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [27]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray28[T any](w []byte, array [28]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray28[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [28]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [28]T{}, err
	}

	array := [28]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [28]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 28; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [28]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray29[T any](w []byte, array [29]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray29[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [29]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [29]T{}, err
	}

	array := [29]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [29]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 29; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [29]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray30[T any](w []byte, array [30]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray30[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [30]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [30]T{}, err
	}

	array := [30]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [30]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 30; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [30]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray31[T any](w []byte, array [31]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray31[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [31]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [31]T{}, err
	}

	array := [31]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [31]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 31; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [31]T{}, err
		}
		r = r2
	}

	return r, array, nil
}

func EncodeArray32[T any](w []byte, array [32]T, encode func([]byte, T) []byte) []byte {
	w = EncodeU64(w, uint64(len(array)))

	for _, value := range array {
		w = encode(w, value)
	}

	return w
}
func DecodeArray32[T any](r []byte, decode func([]byte) ([]byte, T, error)) ([]byte, [32]T, error) {
	r, size, err := DecodeU64(r)
	if err != nil {
		return nil, [32]T{}, err
	}

	array := [32]T{}
	for i := 0; i < int(size); i++ {
		r2, value, err := decode(r)
		if err != nil {
			return nil, [32]T{}, err
		}

		array[i] = value
		r = r2
	}

	for i := 32; i < int(size); i++ {
		r2, _, err := decode(r)
		if err != nil {
			return nil, [32]T{}, err
		}
		r = r2
	}

	return r, array, nil
}
